services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3030:80"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - user-service
      - postgres
    profiles:
      - full

  # 用户服务 (NestJS)
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:password@postgres:5432/happyday_users
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    profiles:
      - full
      - backend

  # 花园服务 (Go)
  garden-service:
    build:
      context: ./services/garden-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/happyday_gardens
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    profiles:
      - full
      - backend

  # 日志服务 (NestJS)
  journal-service:
    build:
      context: ./services/journal-service
      dockerfile: Dockerfile
      target: development
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:password@postgres:5432/happyday_journals
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./services/journal-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    profiles:
      - full
      - backend

  # AI服务 (Python/FastAPI)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - MODEL_PATH=/models
      - INFERENCE_ENDPOINT=http://localhost:8081
      - DATABASE_URL=postgres://postgres:password@postgres:5432/happyday_ai_analytics
    volumes:
      - ./services/ai-service:/app
      - ./models:/models
    depends_on:
      - postgres
    profiles:
      - full
      - ai
    # GPU support (optional - remove if no GPU available)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=happyday
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Elasticsearch (用于日志和搜索)
  elasticsearch:
    image: elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    profiles:
      - full
      - monitoring

  # Kibana (日志可视化)
  kibana:
    image: kibana:8.8.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    profiles:
      - full
      - monitoring

  # Prometheus (监控)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    profiles:
      - full
      - monitoring

  # Grafana (监控面板)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3100:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    profiles:
      - full
      - monitoring

  # Nginx (反向代理和负载均衡) - 可选
  nginx:
    image: nginx:alpine
    ports:
      - "8080:8080"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - user-service
    profiles:
      - full
      - production

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
